/*
 * Copyright (c) 2007 University of Jaume-I, 2013 Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Willow Garage, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Author: Mario Prats
 */

#ifndef ODEGLVIRTUALCAMERA_H
#define ODEGLVIRTUALCAMERA_H

#include <lima/limaconfig.h>
#ifdef _USE_GL_

#include <lima/VirtualCamera.h>
#include <lima/ODEGLScene.h>
#include <lima/GeomModel.h>

/**
 A virtual camera able to render an ODEGLScene

 @author Mario Prats <mprats@icc.uji.es>
 */
class ODEGLVirtualCamera : public VirtualCamera
{
public:
  unsigned char *image; ///< image generated by the OpenGL context

  ODEGLVirtualCamera(ODEGLScene *scene, int width, int height);

  /** Sets the maximum visible distance for the OpenGL camera */
  void setMaxVisibleDistance(float max);

  /** Renders the virtual world */
  void renderScene();

  /** Sets the OpenGL Modelview matrix to the given homogeneous matrix */
  static void setModelViewMatrix(vpHomogeneousMatrix M);

  /** Sets the OpenGL Projection matrix to the given camera calibration parameters */
  static void setCalibrationMatrix(float fx, float fy, int w, int h, float cx, float cy);

  virtual void acquire(vpImage<unsigned char> &I); ///< B/W image capture
  virtual void acquire(vpImage<vpRGBa> &I);///< Color image capture

  void close()
  {}

  ~ODEGLVirtualCamera();

};
#endif
#endif

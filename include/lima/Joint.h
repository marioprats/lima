/*
 * Copyright (c) 2007 University of Jaume-I, 2013 Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Willow Garage, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Author: Mario Prats
 */

#ifndef JOINT_H
#define JOINT_H

#include <lima/limaconfig.h>
#include <lima/Object.h>
#ifdef _USE_ODE_
#include <JointDynamicModel.h>
#endif
#include <visp/vpHomogeneousMatrix.h>

/**
 A joint between two objects

 @author Mario Prats <mprats@icc.uji.es>
 */
class Joint
{
public:
  Object *next; ///< Object that is linked to this joint
  Object *previous; ///< Object that contains this joint
  vpHomogeneousMatrix pMj; ///< Pose of the joint in the container object frame
  vpHomogeneousMatrix nMj; ///< Pose of the joint in the next object frame
#ifdef _USE_ODE_
  JointDynamicModel *dynamic_model; ///< Dynamic model of the joint
#endif

  Joint();

  /** This method must be implemented by all subclases.
   It must return the joint type into a string
   */
  virtual string getType()=0;

  /** Returns the object that is attached to this joint */
  Object *getNext()
  {
    return next;
  }
  /** Returns the object that contains this joint */
  Object *getPrevious()
  {
    return previous;
  }
  /** Gets the joint pose in the container object frame */
  vpHomogeneousMatrix getPosition()
  {
    return pMj;
  }
  /** Gets the next object pose in the previous object frame */
  vpHomogeneousMatrix getNextObjectPose()
  {
    return pMj * getJointTransformation() * nMj.inverse();
  }
  /** Sets the object after the joint */
  void linkTo(Object *next)
  {
    this->next = next;
    next->linkedBy = this;
  }
  /** Sets the object before the joint */
  void linkedBy(Object *previous)
  {
    this->previous = previous;
  }

  /** Gets the homogeneous transformation generated by current joint value
   All subclasses must implement this method */
  virtual vpHomogeneousMatrix getJointTransformation()=0;

  ~Joint();
};

#endif
